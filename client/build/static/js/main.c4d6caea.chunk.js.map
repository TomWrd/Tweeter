{"version":3,"sources":["store/actions/twittercard.js","store/reducers/twittercard.js","components/TweetInput/TweetInput.js","components/TwitterCard/TwitterCard.js","screens/Main/Main.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["createTweet","tweet","author","name","username","image","dispatch","getState","type","initialState","twittercardReducer","state","action","TweetInput","props","useDispatch","useState","tweetText","setTweetText","tweetImage","setTweetImage","imageUploading","setImageUploading","displayUploader","setDisplayUploader","formData","FormData","submitTweet","a","cardDetails","text","attachment","actions","observable$","Observable","subscriber","console","log","JSON","stringify","axios","post","then","response","next","data","file","complete","charactersRemaining","length","className","TextField","multiline","value","rows","placeholder","onChange","substring","handleTextChange","target","onClick","Button","variant","color","onDrop","acceptedFiles","fd","append","subscribe","x","error","err","handleUploadImage","accept","getRootProps","getInputProps","src","TwitterCard","Math","floor","random","Main","useSelector","twittercard","rootReducer","combineReducers","store","createStore","applyMiddleware","ReduxThunk","App","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.c4d6caea.chunk.js","sourcesContent":["export const CREATE_TWEET = \"CREATE_TWEET\";\n\nexport const createTweet = (tweet) => {\n    tweet.author = {\n        name: \"Johnny Consultant\",\n        username: \"Dummy\",\n        image: \"/test_dummy.jpg\"\n    }\n\n    return (dispatch, getState) => {\n        dispatch({\n            type: CREATE_TWEET,\n            tweet: tweet\n        })\n    }\n}","import {CREATE_TWEET} from '../actions/twittercard';\n\nconst initialState = {\n    tweet: {\n    }\n};\n\nconst twittercardReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case CREATE_TWEET:    \n            return {\n                ...state,\n                tweet: action.tweet\n            }\n    }\n    return state;\n}\n\nexport default twittercardReducer;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './TweetInput.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {GrClose} from 'react-icons/gr';\nimport {BsImage} from 'react-icons/bs';\nimport {FaUpload} from 'react-icons/fa';\nimport * as actions from '../../store/actions/twittercard';\nimport axios from 'axios';\nimport Dropzone from 'react-dropzone'\nimport {BounceLoader} from 'react-spinners';\nimport { Observable } from 'rxjs';\n \n \nconst TweetInput = (props) => {\n    const dispatch = useDispatch();\n    const [tweetText, setTweetText] = useState(\"\");\n    const [tweetImage, setTweetImage] = useState();\n    const [imageUploading, setImageUploading] = useState(false);\n    const [displayUploader, setDisplayUploader] = useState(false);\n    var formData = new FormData();\n    \n    const submitTweet = async () => {\n        var cardDetails = {\n            text: tweetText,\n            attachment: tweetImage\n        }\n        await dispatch(actions.createTweet(cardDetails));                \n        setTweetText(\"\");\n        setTweetImage();\n        setDisplayUploader(false);\n    }\n\n    const handleTextChange = (text) => {\n        setTweetText(text.substring(0,279));\n    }\n\n    const observable$ = new Observable(subscriber => {\n        console.log(\"Posting form data: \" + JSON.stringify(formData));\n        axios.post('/UploadImage', formData)\n        .then(response => {\n            subscriber.next(response.data.file);\n            subscriber.complete();\n        })\n      });\n\n    const handleUploadImage = (acceptedFiles) => {\n        var file = acceptedFiles[0];\n\n        var fd = new FormData();            \n        fd.append('tweetImage', file);\n        formData = fd;\n        setImageUploading(true);\n        observable$.subscribe({\n            next(x) { setTweetImage(x); console.log('Responded with:  ' + x); },\n            error(err) { console.error('something wrong occurred: ' + err); },\n            complete() { console.log('done'); }\n          });\n        setImageUploading(false);\n    }\n    \n    var charactersRemaining = 280 - tweetText.length;\n\n    return (\n        <div>\n            <div className=\"actions-wrapper\">\n            </div>\n            <div>\n                <div className=\"input-wrapper\">\n                    <div>\n                    <TextField \n                        multiline\n                        value={tweetText}\n                        rows={6}\n                        placeholder={\"What's happening?\"}\n                        onChange={(text) => handleTextChange(text.target.value)}\n                    />\n                    </div>\n                </div>                \n                <div className=\"options-wrapper\">\n                    <BsImage \n                        className=\"options-icon\"\n                        onClick={() => setDisplayUploader( ! displayUploader )}\n                    />\n                    {\n                        //Add image attachment option\n                    }\n                    <div className=\"submit-tweet-wrapper\">\n                    <span className=\"characters-remaining-wrapper\">{charactersRemaining}</span>\n                        <Button \n                            onClick={submitTweet}\n                            className=\"actions-icon\"\n                            variant=\"contained\"\n                            color=\"primary\"\n\n                        >\n                            Tweet\n                        </Button>\n                    </div>\n                </div>\n                {\n                    displayUploader && \n                    <div>\n                            <Dropzone onDrop={acceptedFiles => handleUploadImage(acceptedFiles)} accept={[\"image/jpeg\", \"image/png\",  \"image/jpg\"]}>\n                                {({getRootProps, getInputProps}) => (\n                                    <section>\n                                    <div {...getRootProps()}>\n                                        {\n                                            imageUploading && \n                                            <div className=\"loader-container\">\n                                                <BounceLoader/>\n                                            </div>\n                                        }\n                                        {\n                                            !imageUploading && tweetImage && \n                                            <img src={tweetImage} className=\"attachment-image\"></img>\n                                        }\n                                        {    !imageUploading && ! tweetImage &&\n                                            <FaUpload />\n                                        }\n                                        <input {...getInputProps()} />\n                                        <p>Drag 'n' drop the attachment here, or click the icon.</p>\n                                    </div>\n                                    </section>\n                                )}\n                                </Dropzone>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\nexport default TweetInput;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './TwitterCard.css';\nimport { FaRegComment, FaRetweet } from 'react-icons/fa';\nimport { BsHeart } from 'react-icons/bs';\nimport { AiOutlineUpload } from 'react-icons/ai';\nimport { BsDot } from 'react-icons/bs';\nconst TwitterCard = (props) => {\n    \n    const tweet = props.tweet;\n    return (\n        <div className=\"tweet-card-container\">\n            {\n        <div>\n            <div className=\"card-details-wrapper\">\n                <div className=\"card-left-wrapper\">\n                    <img src={tweet.author.image} className=\"card-profile-picture\" />\n                </div>\n                <div className=\"card-right-wrapper\">\n                    <div className=\"tweet-details-wrapper\">\n                        <span className=\"author-name\">\n                        {\n                            tweet.author.name\n                        }\n                        </span>\n                        <span className=\"author-username\">\n                        @\n                        {\n                            tweet.author.username\n                        }\n                        </span>\n                        <span className=\"dot-divider\">\n                            <BsDot />\n                        </span>\n                        <span className=\"post-date-wrapper\">\n                            {Math.floor(Math.random() * 60)}\n                            m\n                        </span>\n                    </div>\n                    <div className=\"card-content-wrapper\">\n                        <div className=\"card-text-wrapper\">\n                        {\n                            tweet.text\n                        }\n                        </div>\n                        <div className=\"card-attachment-wrapper\">\n                            <img src={tweet.attachment} className=\"card-attachment\" />                    \n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-interactions-wrapper\">\n                <div className=\"comments-wrapper\">\n                    <FaRegComment />\n                    <span className=\"interaction-count\">\n                        {Math.floor(Math.random() * 100)}\n                    </span>\n                </div>\n                <div className=\"retweets-wrapper\">\n                    <FaRetweet />\n                    <span className=\"interaction-count\">\n                        {Math.floor(Math.random() * 100)}\n                    </span>\n                </div>\n                <div className=\"hearts-wrapper\">\n                    <BsHeart />\n                    <span className=\"interaction-count\">\n                        {Math.floor(Math.random() * 100)}\n                    </span>\n                </div>\n                <div className=\"share-wrapper\">\n                    <AiOutlineUpload />\n                    <span className=\"interaction-count\">\n                        {Math.floor(Math.random() * 100)}\n                    </span>\n                </div>\n            </div>\n\n                </div>\n            }\n        </div>\n    )\n}\nexport default TwitterCard;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './Main.css';\n\nimport TweetInput from '../../components/TweetInput/TweetInput';\nimport TwitterCard from '../../components/TwitterCard/TwitterCard';\n\nconst Main = (props) => {\n\n    const tweet = useSelector(state => state.twittercard.tweet);\n    return (\n        <div>\n            <div className=\"tweet-input-wrapper\">\n                <TweetInput />\n            </div>\n            <div className=\"tweet-card-wrapper\">\n                {\n                    tweet.author &&\n                    <TwitterCard \n                        tweet={tweet}\n                    />\n                }\n            </div>\n        </div>\n    )\n}\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport twittercardReducer from './store/reducers/twittercard';\nimport ReduxThunk from 'redux-thunk';\nimport {createStore , combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport Main from './screens/Main/Main';\n\nconst rootReducer = combineReducers({twittercard: twittercardReducer});\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n        <Main />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}